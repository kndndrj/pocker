#!/bin/sh

USAGE="Usage: $0 <user> [old-password] [new-password]
If passwords are not defined, you will be prompted for them."

if [ -z "$1" ]; then
    echo "$USAGE"
    exit 1
fi


###################################
## OLD PASSWORD VALIDATION       ##
###################################
USERNAME="$1"
OLDPASSWORD="$2"
NEWPASSWORD="$3"

if ! (grep -q "^$USERNAME:" /etc/shadow); then
    echo "error: user $USERNAME doesn't exist"
    exit 1
fi

# Ask for old password here (if not already provided), so we can exit before doing anything
if [ -z "$OLDPASSWORD" ]; then
    printf "current password for user %s: " "$USERNAME"
    stty -echo
    read -r OLDPASSWORD
    stty echo
    echo
fi

# Read the existing password from /etc/shadow
OLDSHADOW="$(getent shadow "$USERNAME")"
OLDHASH="$(echo "$OLDSHADOW" | cut -d ":" -f 2)"
OLDFORMAT="$(echo "$OLDHASH" | cut -d "\$" -f 2)"
OLDSALT="$(echo "$OLDHASH" | cut -d "\$" -f 3)"

if [ "$OLDFORMAT" != "6" ]; then
    echo "error: unsupported hashing algorithm of current password: \"\$$OLDFORMAT\$\""
    exit 1
fi

# Validate the old password
if [ "$(openssl passwd -6 -salt "$OLDSALT" "$OLDPASSWORD")" != "$OLDHASH" ]; then
    echo "error: wrong old password!"
    exit 1
fi


###################################
## GET NEW PASSWORD              ##
###################################
# Prompt for the new password
if [ -z "$NEWPASSWORD" ]; then
    printf "new password for user %s: " "$USERNAME"
    stty -echo
    read -r NEWPASSWORD
    stty echo
    echo
    if [ -z "$NEWPASSWORD" ]; then
        echo "error: Empty password not allowed. Please try again."
        exit 1
    fi

    printf "confirm password: "
    stty -echo
    read -r CONFIRM
    stty echo
    echo
    if [ "$CONFIRM" != "$NEWPASSWORD" ]; then
        echo "error: Passwords don't match. Please try again."
        exit 1
    fi
fi


###################################
## WRITE THE NEW PASSWORD        ##
###################################
# Generate salt
SALT="$(openssl rand -hex 4)"
# Generate the actual password
HASH="$(openssl passwd -6 -salt "$SALT" "$NEWPASSWORD")"
# Get number of days since epoch
DAYS_SINCE_EPOCH="$(( $(date +%s) / 86400 ))"

# input in /etc/shadow
NEWSHADOW="$USERNAME:$HASH:$DAYS_SINCE_EPOCH::::::"

TEMP="$(mktemp)"
sed "/^$USERNAME:/ s;^.*$;$NEWSHADOW;g" /etc/shadow > "$TEMP"
cat "$TEMP" > /etc/shadow
rm "$TEMP"
